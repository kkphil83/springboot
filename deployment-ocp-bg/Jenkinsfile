/*podTemplate(
	label: "maven",
	cloud: "openshift",
	inheritFrom: "maven",
	containers: [
		//container image는 docker search 명령 이용
		containerTemplate(name: 'jnlp', image: 'image-registry.openshift-image-registry.svc:5000/openshift/jenkins-agent-maven:latest', args: 
		'${computer.jnlpmac} ${computer.name}'),
		containerTemplate(name: 'cli', image: 'image-registry.openshift-image-registry.svc:5000/openshift/cli:latest', privileged: true, ttyEnabled: true, command: 'cat'),
		containerTemplate(name: 'podman', image: 'image-registry.openshift-image-registry.svc:5000/cicd/podman:latest', privileged: true, ttyEnabled: true, command: 'cat')
	]
) 
{ */
	node("maven") {
		String stageName = ""
		stageName = "Get Source"	
		stage(stageName) {
			echo "**** START : " + stageName
			
			git "https://github.com/kkphil83/springboot.git"
			
		}
		
		//-- 환경변수 파일 읽어서 변수값 셋팅
		def props = readProperties  file:"./deployment-ocp/pipeline-ocp.properties"  // __custom__
		def image = props["image"]
		def appname = props["appname"]
		def containername = props["containername"]
		def deployment = props["deployment"]
		def baseDir = props["baseDir"]
		def baseDeployDir = props["baseDeployDir"]
		def namespace = props["namespace"]
		def skipStages = props["skipStages"]
		def ocpClusterDomain = props["ocpClusterDomain"]
		def imageRegistry = props["imageRegistry"]
		def newColor = ""
		def currentColor = ""

		// OCP internal registry
		def internalRegistry = props["internalRegistry"]

		// tag를 재정의 함. 이미지 버전이 달라야 배포시 컨테이너에서 인식
		def now = new Date()
		def tag = now.format("yyMMdd-HHmmss", TimeZone.getTimeZone('Asia/Seoul'))

		try {
			stageName = "Build maven project"
			stage(stageName) {
				echo "**** START : " + stageName + "\n"
				def _dir = pwd();
				echo "path : ${_dir}"
				echo "baseDir : ${baseDir}"
				echo "baseDeployDir : ${baseDeployDir}"
				sh "ls -al"
				container('jnlp') {
					sh "mvn -B -f ${baseDir} -s ./settings.xml clean package"
					echo "*** RESULT ***"
					sh "pwd"
					sh "ls -al ${baseDir}/target"
				}
			}		

			stageName = "Check the current color"	
			stage(stageName) {
				echo "\n******* START : " + stageName + "\n"

				//sh "oc login -u admin -p admin https://api-int.${ocpClusterDomain}:6443  --insecure-skip-tls-verify"
				sh "oc config set-context --namespace=${namespace} --current"
				sh "oc get svc ${appname}-svc -o wide | grep svc | grep blue | wc -l > currentColor.txt"
				currentColor = sh(script: 'cat currentColor.txt', returnStdout: true)
				newColor = ""

				if(toIntOrNull(currentColor) > 0){
					currentColor = "blue"
					newColor = "green"
				}else{
					currentColor = "green"
					newColor = "blue"
				}

				echo "\n # Current Color : " + currentColor + "\n #     New Color : " + newColor + "\n"
			}

			stageName = "Build Container Image"	
			stage(stageName) {
				echo "**** START : " + stageName + "\n"

				container('podman') {
					echo "*** podman Container ***"

					withCredentials([usernamePassword(credentialsId: 'internalRegistry', usernameVariable: 'internalRegistry_user', passwordVariable: 'internalRegistry_pw')]) {
						sh "podman login -u $internalRegistry_user ${internalRegistry} --tls-verify=false -p '$internalRegistry_pw'"
						sh "podman build -f ${baseDir}${baseDeployDir}/Dockerfile -t ${imageRegistry}/${image}:${tag} ${WORKSPACE}  --tls-verify=false"
					}
					withCredentials([usernamePassword(credentialsId: 'quay', usernameVariable: 'quay_user', passwordVariable: 'quay_pw')]) {
						sh "podman login -u $quay_user ${imageRegistry} -p '$quay_pw'"
						sh "podman push ${imageRegistry}/${image}:${tag} --tls-verify=false"
						sh "podman tag ${imageRegistry}/${image}:${tag} ${imageRegistry}/${image}:latest"
						sh "podman push ${imageRegistry}/${image}:latest --tls-verify=false"
					}
				}
			}

			stageName = "Deploy to OCP"
			stage( stageName ) {
				echo "\n******* START : " + stageName + "\n"

// 서비스 배포를 위한 파일명 설정
				def newDeploymentYaml = "deploy-${newColor}.yaml"
				def curDeploymentYaml = "deploy-${currentColor}.yaml"
 
// 기존에 Deployment 가 몇 개 존재하는지 확인
				sh "oc get deploy ${appname}-blue -n ${namespace} | grep ${appname} | wc -l > existed.txt"
				def blueExisted = sh(script: 'cat existed.txt', returnStdout: true)
				sh "oc get deploy ${appname}-green -n ${namespace} | grep ${appname} | wc -l > existed.txt"
				def greenExisted = sh(script: 'cat existed.txt', returnStdout: true)
				int existed = blueExisted.toInteger() + greenExisted.toInteger()

				echo "\n******* existed color count : " + existed + "\n"

				if(existed > 0){
					if(existed == 2){				
// [정상상태] 기존에 Blue/Green 모두 존재하는 경우 => 신규 버전 Rolling Update
						echo "\n******* 기존에 Blue/Green 모두 존재하는 경우 => 신규 버전 : " + newColor + " Rolling Update \n"
						
						sh "oc set image deployment/${appname}-${newColor} ${containername}=${internalRegistry}/${namespace}/${image}:${tag} --record -n ${namespace}"
						sh "oc rollout status deployment.v1.apps/${appname}-${newColor} -n ${namespace}"
						sh "oc patch service ${appname}-svc-test --type merge --patch '{\"spec\":{\"selector\":{\"color\":\"${newColor}\"}}}'"
					}else if(existed == 1){
// [비정상상태] 기존에 Blue/Green 중 하나만 존재하는 경우 => 신규 버전 배포
						echo "\n******* 기존에 Blue/Green 중 하나만 존재하는 경우 => 신규 버전 : " + newColor + " 배포 \n"

						sh "oc apply -n ${namespace} -f ${baseDir}${baseDeployDir}/${newDeploymentYaml}"
						sh "oc patch service ${appname}-svc-test --type merge --patch '{\"spec\":{\"selector\":{\"color\":\"${newColor}\"}}}'"
					}

					echo "\n****** New Color - Result ******\n"
					sh "oc get deployment -n ${namespace} | grep ${newColor}"
					sh "oc get pod -n ${namespace} | grep ${newColor}"

					echo " TEST URL : http://test.${appname}.${namespace}.apps.${ocpClusterDomain} \n"

// 신규 버전을 서비스하기 위한 승인 절차
					try {
							timeout(time: 10, unit: 'MINUTES') { 
							input("\n### 신규 버전으로 서비스 하시겠습니까? (대기시간 10분)\n") 
						}
						echo "\n******* 신규 버전으로 서비스합니다. ********\n" 

						sh "oc patch service ${appname}-svc --type merge --patch '{\"spec\":{\"selector\":{\"color\":\"${newColor}\"}}}'"
						sh "oc patch service ${appname}-svc-test --type merge --patch '{\"spec\":{\"selector\":{\"color\":\"${currentColor}\"}}}'"

					} catch (Exception e) { 
						echo "\n******* 기존 버전을 유지합니다. ********\n"
					}

				}else{
// [초기상태] 기존 서비스가 없는 초기 상태인 경우 => Blue/Green 모두 배포
					echo "\n******* 기존 서비스가 없는 초기 상태인 경우 => Blue, Green 모두 배포 \n"

					sh "oc apply -n ${namespace} -f ${baseDir}${baseDeployDir}/${curDeploymentYaml}"
					sh "oc apply -n ${namespace} -f ${baseDir}${baseDeployDir}/${newDeploymentYaml}"
					sh "oc apply -n ${namespace} -f ${baseDir}${baseDeployDir}/svc-test.yaml"
					sh "oc apply -n ${namespace} -f ${baseDir}${baseDeployDir}/svc.yaml"
					sh "oc expose service ${appname}-svc-test --hostname test.${appname}.${namespace}.apps.${ocpClusterDomain}"
					sh "oc expose service ${appname}-svc --hostname ${appname}.${namespace}.apps.${ocpClusterDomain}"					
				}

				echo "\n****** RESULT ******\n"
				sh "oc get deployment -n ${namespace} | grep ${appname}"
				sh "oc get pod -n ${namespace} | grep ${appname}"
				sh "oc get svc -n ${namespace} | grep ${appname}"
				sh "oc get route -n ${namespace} | grep ${appname}"

				echo "\n******* FINISH Deploy : SUCCESS \n"
				echo " Service URL : http://${appname}.${namespace}.apps.${ocpClusterDomain} \n"
				echo " TEST    URL : http://test.${appname}.${namespace}.apps.${ocpClusterDomain} \n"
			}

		} catch(Exception e) {
			currentBuild.result = "FAILED"			
			println(e.toString());
         	println(e.getMessage());
         	println(e.getStackTrace()); 
		}
	}
//}