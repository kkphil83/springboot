node {
	String stageName = ""
	stageName = "Get Source"	
	stage(stageName) {
		echo "**** START : " + stageName
		
		git "https://github.com/kkphil83/springboot.git"
		
	}
	
	//-- 환경변수 파일 읽어서 변수값 셋팅
	def props = readProperties  file:"./deployment-ocp/pipeline-ocp.properties"  // __custom__
	def imageRegistry = props["imageRegistry"]
	def image = props["image"]
	def appname = props["appname"]
	def containername = props["containername"]
	def deployment = props["deployment"]
	def baseDir = props["baseDir"]
	def baseDeployDir = props["baseDeployDir"]
	def namespace = props["namespace"]
	def skipStages = props["skipStages"]
	
	def ocpClusterDomain = props["ocpClusterDomain"]
		
		
	// tag를 재정의 함. 이미지 버전이 달라야 배포시 컨테이너에서 인식
    def now = new Date()
    def tag = now.format("yyMMdd-HHmmss", TimeZone.getTimeZone('Asia/Seoul'))


	try {
		stageName = "Build maven project"
		stage(stageName) {
			echo "**** START : " + stageName
			def _dir = pwd();
			echo "path : ${_dir}"
			echo "baseDir : ${baseDir}"
			echo "baseDeployDir : ${baseDeployDir}"
			sh "ls -al"

			sh "/jenkins/apache-maven-3.6.3/bin/mvn -B -f ${baseDir} clean package"
			echo "*** RESULT ***"
			sh "pwd"
			sh "ls -al ${baseDir}/target"
			
		}		

		stageName = "Build Container Image"	
		stage(stageName) {
			echo "**** START : " + stageName

	        sh "oc login -u kubeadmin -p eH8zi-Y6Ucf-7kfxa-bhv4V https://api-int.${ocpClusterDomain}:6443  --insecure-skip-tls-verify"

    	    def pw = sh(script: 'oc whoami -t', returnStdout: true)
        	sh "sudo podman login -u kubeadmin  ${imageRegistry} --tls-verify=false -p ${pw}"

        	sh "sudo podman build -f ${baseDir}${baseDeployDir}/Dockerfile -t ${imageRegistry}/${namespace}/${image}:${tag} ${WORKSPACE}"
			sh "sudo podman push ${imageRegistry}/${namespace}/${image}:${tag} --tls-verify=false "
			sh "sudo podman tag ${imageRegistry}/${namespace}/${image}:${tag} ${imageRegistry}/${namespace}/${image}:latest"
			sh "sudo podman push ${imageRegistry}/${namespace}/${image}:latest --tls-verify=false"
		}
						
		stageName = "Deploy to Cluster"
		stage( stageName ) {
			echo "**** START : " + stageName

			def existed = sh(script: 'oc get deploy springboot-service -n default | wc -l', returnStdout: true)
/*
			if(existed == '2'){
				echo "**** Delete Existed Deployment / Service / Ingress"
				sh "oc delete -n ${namespace} -f ${baseDir}${baseDeployDir}/${deployment}"
			}
*/
			sh "oc apply -n ${namespace} -f ${baseDir}${baseDeployDir}/${deployment}"
			sh "oc expose deploy ${appname} --name svc-${appname}"
			sh "oc get deployment -n ${namespace}"
			sh "oc get svc -n ${namespace}"
			sh "oc get route -n ${namespace}"
		}
			
			
		echo "**** FINISH ALL STAGES : SUCESS"
		echo " swagger URL : ${appname}.app.${ocpClusterDomain}/swagger-ui.html"
		
	} catch(e) {
		currentBuild.result = "FAILED"			
	}
}
